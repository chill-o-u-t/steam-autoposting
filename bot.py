import os
import time
import random
import json
from datetime import datetime
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException, \
    ElementNotInteractableException
import undetected_chromedriver as uc

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class SteamCommentBot:
    def __init__(self):
        self.driver = None
        self.wait = None

    def human_delay(self, min_seconds=1, max_seconds=3):
        """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        delay = random.uniform(min_seconds, max_seconds)
        time.sleep(delay)

    def human_type(self, element, text):
        """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –ø–∞—É–∑–∞–º–∏ –∏ –æ—à–∏–±–∫–∞–º–∏"""
        for char in text:
            element.send_keys(char)
            time.sleep(random.uniform(0.05, 0.2))
            if random.random() < 0.03:
                element.send_keys(Keys.BACK_SPACE)
                time.sleep(random.uniform(0.1, 0.3))
                element.send_keys(char)

    def human_scroll(self, scroll_min=200, scroll_max=800):
        """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        scroll_amount = random.randint(scroll_min, scroll_max)
        self.driver.execute_script(f"window.scrollBy(0, {scroll_amount});")
        self.human_delay(0.5, 1.5)

    def move_mouse_humanly(self, element):
        """–î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞"""
        actions = ActionChains(self.driver)
        actions.move_to_element(element)
        actions.perform()
        self.human_delay(0.2, 0.5)

    def get_stealth_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        chrome_options = Options()

        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)

        # –û–±—ã—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--start-maximized")
        chrome_options.add_argument("--disable-notifications")

        # –°–ª—É—á–∞–π–Ω—ã–π user-agent
        user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]
        chrome_options.add_argument(f"user-agent={random.choice(user_agents)}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º undetected-chromedriver
        driver = uc.Chrome(options=chrome_options)

        # –£–±–∏—Ä–∞–µ–º webdriver –ø—Ä–∏–∑–Ω–∞–∫–∏
        stealth_script = """
        Object.defineProperty(navigator, 'webdriver', {
            get: () => undefined,
        });
        Object.defineProperty(navigator, 'plugins', {
            get: () => [1, 2, 3, 4, 5],
        });
        """
        driver.execute_script(stealth_script)

        return driver

    def login_with_cookies(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫—É–∫–∏"""
        try:
            print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫—É–∫–∏...")

            # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ–º–µ–Ω steamcommunity.com
            self.driver.get("https://steamcommunity.com")
            self.human_delay(2, 4)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫—É–∫–∏
            cookies_to_add = [
                {
                    'name': 'steamLoginSecure',
                    'value': os.getenv('STEAM_LOGIN_SECURE'),
                    'domain': '.steamcommunity.com',
                    'path': '/',
                    'secure': True
                },
                {
                    'name': 'steamRememberLogin',
                    'value': os.getenv('STEAM_REMEMBER_LOGIN', ''),
                    'domain': '.steamcommunity.com',
                    'path': '/',
                    'secure': True
                }
            ]

            for cookie in cookies_to_add:
                if cookie['value']:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å—Ç—å
                    try:
                        self.driver.add_cookie(cookie)
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫—É–∫–∞: {cookie['name']}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—É–∫—É {cookie['name']}: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫—É–∫
            self.driver.refresh()
            self.human_delay(3, 5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            self.driver.get("https://steamcommunity.com/my/profile")
            self.human_delay(2, 4)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
            try:
                profile_name = self.wait.until(
                    EC.presence_of_element_located((By.CLASS_NAME, "persona_name"))
                )
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫: {profile_name.text}")
                return True
            except:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫—É–∫–∏")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫—É–∫–∏: {e}")
            return False

    def post_comment_to_group(self, group_url, comment_text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –≥—Ä—É–ø–ø—É"""
        try:
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–∂—É –≤ –≥—Ä—É–ø–ø—É: {group_url}")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É
            self.driver.get(group_url)
            self.human_delay(3, 6)

            # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
            self.human_scroll()
            self.human_delay(1, 2)

            # –ò—â–µ–º –ø–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            comment_selectors = [
                "textarea.commentthread_textarea",
                "textarea[name='comment']",
                "#comment_form textarea",
                ".commentthread_textarea",
                "textarea.TextArea"
            ]

            comment_area = None
            for selector in comment_selectors:
                try:
                    comment_area = self.wait.until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                    )
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {selector}")
                    break
                except:
                    continue

            if not comment_area:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                return False

            # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª–µ–º
            self.move_mouse_humanly(comment_area)
            self.human_delay(1, 2)

            # –ö–ª–∏–∫–∞–µ–º –∏ –≤–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
            comment_area.click()
            self.human_delay(0.5, 1)
            self.human_type(comment_area, comment_text)
            self.human_delay(1, 2)

            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            button_selectors = [
                "input[type='submit'][value='Post Comment']",
                "button[type='submit']",
                ".commentthread_submit",
                "#comment_post",
                ".DialogButton"
            ]

            submit_button = None
            for selector in button_selectors:
                try:
                    submit_button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {selector}")
                    break
                except:
                    continue

            if not submit_button:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return False

            # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            self.move_mouse_humanly(submit_button)
            self.human_delay(1, 2)
            submit_button.click()

            print("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            self.human_delay(5, 10)  # –î–æ–ª–≥–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                self.driver.save_screenshot(f"error_{timestamp}.png")
                print("üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏")
            except:
                pass
            return False

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
            self.driver = self.get_stealth_driver()
            self.wait = WebDriverWait(self.driver, 15)

            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫—É–∫–∏
            if not self.login_with_cookies():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return

            # –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            groups_to_post = os.getenv('STEAM_GROUPS', '').split(',')
            comment_text = (
                 "üñ§Send me offerüñ§\n"
                 ":steamthis: Open to any deals"
                 "\nhttps://steamcommunity.com/tradeoffer/new/?partner=889283026&token=NhsSV1bu"
                 "\n[H]"
                 "\nButterfly knife | boreal forest FT"
                 "\nSport gloves | bronze morph BS"
                 "\nUSP-S | kill —Åonfirmed FT"
             )

            if not groups_to_post or not comment_text:
                print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ .env")
                return

            successful_posts = 0
            failed_posts = 0

            print(f"üìä –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ {len(groups_to_post)} –≥—Ä—É–ø–ø...")

            for i, group_url in enumerate(groups_to_post):
                group_url = group_url.strip()
                if not group_url:
                    continue

                print(
                    f"\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥—Ä—É–ø–ø—É {i + 1}/{len(groups_to_post)}: {group_url}")

                success = self.post_comment_to_group(group_url, comment_text)

                if success:
                    successful_posts += 1
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_posts}")
                else:
                    failed_posts += 1
                    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {failed_posts}")

                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ (2-5 –º–∏–Ω—É—Ç)
                if i < len(groups_to_post) - 1:
                    delay = random.randint(180, 300)
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–æ–π...")
                    time.sleep(delay)

            print(f"\nüéØ –ò—Ç–æ–≥: –£—Å–ø–µ—à–Ω–æ {successful_posts}, –ù–µ—É–¥–∞—á–Ω–æ {failed_posts}")

        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

        finally:
            if self.driver:
                print("üõë –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
                self.driver.quit()


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = ['STEAM_LOGIN_SECURE', 'STEAM_GROUPS']
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env: {', '.join(missing_vars)}")
        print("üí° –ü—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞:")
        print("STEAM_LOGIN_SECURE=your_steam_login_secure_cookie")
        print("STEAM_SESSIONID=your_session_id")
        print("STEAM_REMEMBER_LOGIN=your_remember_login")
        print(
            "STEAM_GROUPS=https://steamcommunity.com/groups/group1,https://steamcommunity.com/groups/group2")
        print("COMMENT_TEXT=–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–¥–µ—Å—å")
    else:
        bot = SteamCommentBot()
        bot.run()
