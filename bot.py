import os
import time
import random
import json
import shutil
import signal
import tempfile
from datetime import datetime

from dotenv import load_dotenv

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import (
    TimeoutException,
    NoSuchElementException,
    ElementNotInteractableException,
    StaleElementReferenceException,
)
from selenium.webdriver.common.action_chains import ActionChains
import undetected_chromedriver as uc

# ----------------------------
# ENV
# ----------------------------
load_dotenv()
STEAM_LOGIN_SECURE = os.getenv("STEAM_LOGIN_SECURE")
STEAM_GROUPS = [g.strip() for g in os.getenv("STEAM_GROUPS", "").split(",") if g.strip()]
MESSAGE = os.getenv(
    "MESSAGE",
    "üñ§Send me offerüñ§\n"
    ":steamthis: Open to any deals"
    "\nhttps://steamcommunity.com/tradeoffer/new/?partner=889283026&token=NhsSV1bu"
    "\n[H]"
    "\nButterfly knife | boreal forest FT"
    "\nSport gloves | bronze morph BS"
    "\nUSP-S | kill —Åonfirmed FT"
)
INTERVAL = int(os.getenv("INTERVAL", "300"))
CHROME_BIN = os.getenv("CHROME_BIN", "/usr/bin/chromium-browser")
CHROMEDRIVER = os.getenv("UC_DRIVER_EXECUTABLE_PATH", "/usr/bin/chromedriver")


class SteamCommentBot:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.temp_dir = tempfile.mkdtemp(prefix="chrome_profile_")

    def _activate_textarea(self, ta):
        """–î–µ–ª–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–ª—è: –∫–ª–∏–∫ + keydown/keyup, —á—Ç–æ–±—ã Steam —Ä–∞—Å–∫—Ä—ã–ª submit_container."""
        try:
            # –∏–Ω–æ–≥–¥–∞ —Ä–æ–ª—å —É textarea = button, –∂–º—ë–º JS-–∫–ª–∏–∫ –∏ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫
            self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});",
                                       ta)
            try:
                ta.click()
            except Exception:
                pass
            self.driver.execute_script("""
                const el = arguments[0];
                el.focus();
                el.dispatchEvent(new MouseEvent('mousedown', {bubbles:true}));
                el.dispatchEvent(new MouseEvent('mouseup', {bubbles:true}));
                el.dispatchEvent(new MouseEvent('click', {bubbles:true}));
            """, ta)
            # ¬´—É–∫–æ–ª¬ª –∫–ª–∞–≤–∏—à–µ–π —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∏ keydown/keyup-—Å–ª—É—à–∞—Ç–µ–ª–∏ Steam
            try:
                ta.send_keys("a")
                ta.send_keys(Keys.BACK_SPACE)
            except Exception:
                # –µ—Å–ª–∏ send_keys –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è ‚Äî —Å–∏–Ω—Ç–µ—Ç–∏–∫–∞
                self.driver.execute_script("""
                    const el = arguments[0];
                    ['keydown','keyup','keypress'].forEach(t=>el.dispatchEvent(new KeyboardEvent(t,{bubbles:true})));
                """, ta)
        except Exception:
            pass

    def _js_set_value_and_events(self, ta, text):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç (–≤–∫–ª—é—á–∞—è —ç–º–æ–¥–∑–∏) –∏ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç —Å–æ–±—ã—Ç–∏—è."""
        self.driver.execute_script("""
            const el = arguments[0], val = arguments[1];
            const desc = Object.getOwnPropertyDescriptor(HTMLTextAreaElement.prototype, 'value');
            desc.set.call(el, val);
            el.dispatchEvent(new Event('input', {bubbles:true}));
            el.dispatchEvent(new Event('change', {bubbles:true}));
            el.dispatchEvent(new KeyboardEvent('keyup', {bubbles:true}));
        """, ta, text)

    # ----------------------------
    # Human-ish helpers
    # ----------------------------
    def human_delay(self, a=0.3, b=0.9):
        time.sleep(random.uniform(a, b))

    def human_type(self, element, text):
        for ch in text:
            element.send_keys(ch)
            time.sleep(random.uniform(0.03, 0.12))
            if random.random() < 0.02:
                element.send_keys(Keys.BACK_SPACE)
                time.sleep(random.uniform(0.05, 0.2))
                element.send_keys(ch)

    def move_mouse_humanly(self, element):
        # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è ¬´–∏–º–∏—Ç–∞—Ü–∏—è¬ª ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫—Ä–æ–ª–ª–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
        try:
            self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", element)
        except Exception:
            pass

    # ----------------------------
    # DOM/JS helpers
    # ----------------------------
    @staticmethod
    def has_non_bmp(s: str) -> bool:
        return any(ord(ch) > 0xFFFF for ch in s)

    def js_fill_textarea(self, element, text: str):
        self.driver.execute_script(
            """
            const el = arguments[0], val = arguments[1];
            const desc = Object.getOwnPropertyDescriptor(HTMLTextAreaElement.prototype, 'value');
            desc.set.call(el, val);
            el.dispatchEvent(new Event('input', {bubbles:true}));
            el.dispatchEvent(new Event('change', {bubbles:true}));
            """,
            element,
            text,
        )

    def is_visible_js(self, el) -> bool:
        try:
            return self.driver.execute_script(
                """
                const el = arguments[0];
                if (!el) return false;
                const st = getComputedStyle(el);
                const r = el.getBoundingClientRect();
                return st.display !== 'none' && st.visibility !== 'hidden' && r.width > 0 && r.height > 0;
                """,
                el,
            )
        except Exception:
            return False
    # ----------------------------
    # Driver
    # ----------------------------
    def get_stealth_driver(self):
        opts = uc.ChromeOptions()
        # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ —Ñ–ª–∞–≥–∏
        opts.add_argument("--headless=new")
        opts.add_argument("--no-sandbox")
        opts.add_argument("--disable-dev-shm-usage")
        opts.add_argument("--disable-gpu")
        opts.add_argument("--window-size=1920,1080")
        # –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç
        opts.add_argument("--disable-blink-features=AutomationControlled")
        # –ø—Ä–æ—Ñ–∏–ª—å/–∫—ç—à
        opts.add_argument(f"--user-data-dir={self.temp_dir}")
        opts.add_argument("--disable-application-cache")
        opts.add_argument("--disk-cache-size=0")
        # user-agent
        opts.add_argument(
            "--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
            "(KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
        )

        driver = uc.Chrome(
            options=opts,
            headless=True,  # –¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è uc
            browser_executable_path=CHROME_BIN,
            driver_executable_path=CHROMEDRIVER if os.path.exists(CHROMEDRIVER) else None,
        )
        # —É–±—Ä–∞—Ç—å navigator.webdriver
        driver.execute_script("Object.defineProperty(navigator,'webdriver',{get:()=>undefined})")
        return driver

    # ----------------------------
    # Auth via cookies
    # ----------------------------
    def login_with_cookies(self) -> bool:
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫—É–∫–∏...")
        self.driver.get("https://steamcommunity.com/")
        self.human_delay(1.0, 2.0)

        self.driver.delete_all_cookies()
        if STEAM_LOGIN_SECURE:
            try:
                self.driver.add_cookie(
                    {
                        "name": "steamLoginSecure",
                        "value": STEAM_LOGIN_SECURE,
                        "domain": ".steamcommunity.com",
                        "path": "/",
                        "secure": True,
                    }
                )
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫—É–∫–∞: steamLoginSecure")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å steamLoginSecure: {e}")

        self.driver.refresh()
        self.human_delay(2.0, 3.5)

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–Ω—é/–∞–≤–∞—Ç–∞—Ä–∞
        self.driver.get("https://steamcommunity.com/")
        try:
            WebDriverWait(self.driver, 20).until(
                EC.presence_of_element_located((By.ID, "global_action_menu"))
            )
            # sessionid —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è
            if not self.driver.get_cookie("sessionid"):
                print("‚ö†Ô∏è sessionid –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –º–µ–Ω—é –≤–∏–¥–Ω–æ ‚Äî –ø—Ä–æ–±—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True
        except TimeoutException:
            print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî –Ω–µ—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False

    # ----------------------------
    # Posting
    # ----------------------------
    def _wait_submit_container_visible(self, container_id: str, timeout=12):
        end = time.time() + timeout
        last_exc = None
        while time.time() < end:
            try:
                el = self.driver.find_element(By.ID, container_id)
                if self.is_visible_js(el):
                    return el
            except StaleElementReferenceException as e:
                last_exc = e
            except NoSuchElementException:
                pass
            time.sleep(0.2)
        raise TimeoutException(f"Submit container not visible: #{container_id}") from last_exc
    def _click_submit_by_id(self, submit_id: str):
        btn = self.driver.find_element(By.ID, submit_id)  # —Å–≤–µ–∂–∏–π —ç–ª–µ–º–µ–Ω—Ç
        self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", btn)
        self.human_delay(0.2, 0.6)
        try:
            if self.is_visible_js(btn):
                btn.click()
            else:
                self.driver.execute_script("arguments[0].click();", btn)
        except Exception:
            # –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ JS
            btn = self.driver.find_element(By.ID, submit_id)
            self.driver.execute_script("arguments[0].click();", btn)

    def post_comment_to_group(self, group_url: str, comment_text: str) -> bool:
        try:
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–∂—É –≤ –≥—Ä—É–ø–ø—É: {group_url}")
            self.driver.get(group_url)
            self.human_delay(1.5, 2.5)

            # –ù–∞—Ö–æ–¥–∏–º textarea ¬´–±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ—Å—Ç–∞¬ª
            comment_area = WebDriverWait(self.driver, 20).until(
                EC.presence_of_element_located(
                    (
                        By.CSS_SELECTOR,
                        "textarea[id*='_textarea'].commentthread_textarea, textarea.commentthread_textarea",
                    )
                )
            )

            # –§–æ–∫—É—Å/—Å–∫—Ä–æ–ª–ª
            try:
                comment_area.click()
            except Exception:
                pass
            self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", comment_area)
            self.human_delay(0.3, 0.8)

            # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (JS –¥–ª—è —ç–º–æ–¥–∑–∏)
            self._activate_textarea(comment_area)
            self.human_delay(0.3, 0.8)

            self.driver.execute_script("arguments[0].value='';", comment_area)
            self._js_set_value_and_events(comment_area, comment_text)
            self.human_delay(0.2, 0.5)

            # –ò–∑ ID textarea —Å—Ç—Ä–æ–∏–º ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞/–∫–Ω–æ–ø–∫–∏
            textarea_id = comment_area.get_attribute("id") or ""
            base_id = textarea_id[:-9] if textarea_id.endswith(
                "_textarea") else textarea_id
            submit_container_id = f"{base_id}_submit_container"
            submit_id = f"{base_id}_submit"

            submit_el = None
            try:
                # –µ—Å–ª–∏ Steam –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª ‚Äî –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞–Ω–µ—Ç –≤–∏–¥–∏–º—ã–º
                submit_container = self._wait_submit_container_visible(
                    submit_container_id, timeout=8)
                submit_el = self.driver.find_element(By.ID, submit_id)
            except TimeoutException:
                # UI –Ω–µ —Ä–∞—Å–∫—Ä—ã–ª—Å—è ‚Äî –±–µ—Ä—ë–º –∫–Ω–æ–ø–∫—É –Ω–∞–ø—Ä—è–º—É—é, –¥–∞–∂–µ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–∫—Ä—ã—Ç
                try:
                    submit_el = self.driver.find_element(By.ID, submit_id)
                except NoSuchElementException:
                    # –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π: –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞—Å–∏–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ)
                    try:
                        self.driver.execute_script(
                            "const el=document.getElementById(arguments[0]); if(el) el.style.display='block';",
                            submit_container_id)
                        submit_el = self.driver.find_element(By.ID, submit_id)
                    except Exception:
                        submit_el = None

            if not submit_el:
                raise TimeoutException(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ submit: #{submit_id}")

            # 5) –∫–ª–∏–∫ –ø–æ submit (JS-–ø—É—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–∞ —Å–∫—Ä—ã—Ç–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ)
            self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});",
                                       submit_el)
            self.human_delay(0.2, 0.6)
            try:
                if self.is_visible_js(submit_el):
                    submit_el.click()
                else:
                    self.driver.execute_script("arguments[0].click();", submit_el)
            except Exception:
                self.driver.execute_script("arguments[0].click();", submit_el)

            # 6) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞ (–æ—á–∏—Å—Ç–∫–∞ –∏–ª–∏ —Å–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
            try:
                WebDriverWait(self.driver, 10).until(
                    lambda d: ((comment_area.get_attribute(
                        'value') or '').strip() == '') or
                              (self.is_visible_js(
                                  d.find_element(By.ID, submit_container_id)) is False)
                )
            except TimeoutException:
                pass

            # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–æ —Å–≤–µ–∂–µ–º—É id –∏ –∫–ª–∏–∫–∞–µ–º (JS-—Ñ–æ–ª–ª–±—ç–∫)
            self._click_submit_by_id(submit_id)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: textarea –æ—á–∏—Å—Ç–∏–ª–∞—Å—å –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–∫—Ä—ã–ª—Å—è
            try:
                WebDriverWait(self.driver, 10).until(
                    lambda d: ((comment_area.get_attribute("value") or "").strip() == "")
                    or (not self.is_visible_js(d.find_element(By.ID, submit_container_id)))
                )
            except TimeoutException:
                pass

            print("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            self.human_delay(2.5, 5.0)
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            try:
                ts = datetime.now().strftime("%Y%m%d_%H%M%S")
                self.driver.save_screenshot(f"error_{ts}.png")
                print("üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏")
            except Exception:
                pass
            return False

    # ----------------------------
    # Run
    # ----------------------------
    def run(self):
        if not STEAM_LOGIN_SECURE or not STEAM_GROUPS:
            missing = []
            if not STEAM_LOGIN_SECURE:
                missing.append("STEAM_LOGIN_SECURE")
            if not STEAM_GROUPS:
                missing.append("STEAM_GROUPS")
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
            return

        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
        self.driver = self.get_stealth_driver()
        self.wait = WebDriverWait(self.driver, 25)

        # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        def _graceful_exit(*_):
            try:
                if self.driver:
                    self.driver.quit()
            finally:
                try:
                    shutil.rmtree(self.temp_dir, ignore_errors=True)
                except Exception:
                    pass
                os._exit(0)

        signal.signal(signal.SIGTERM, _graceful_exit)
        signal.signal(signal.SIGINT, _graceful_exit)

        # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.login_with_cookies():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            _graceful_exit()

        # —Ü–∏–∫–ª –ø–æ –≥—Ä—É–ø–ø–∞–º
        ok, fail = 0, 0
        print(f"üìä –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ {len(STEAM_GROUPS)} –≥—Ä—É–ø–ø(—ã)...")
        while True:
            for i, url in enumerate(STEAM_GROUPS, 1):
                if not url:
                    continue
                print(f"\nüìù –ì—Ä—É–ø–ø–∞ {i}/{len(STEAM_GROUPS)}: {url}")
                if self.post_comment_to_group(url, MESSAGE):
                    ok += 1
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {ok}")
                else:
                    fail += 1
                    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {fail}")

                if i < len(STEAM_GROUPS):
                    wait_sec = random.randint(5, 10)
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_sec} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–æ–π‚Ä¶")
                    time.sleep(wait_sec)
            time.sleep(300)

        _graceful_exit()


if __name__ == "__main__":
    bot = SteamCommentBot()
    bot.run()
