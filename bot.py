import logging
import os
import time
import random
import json
import tempfile
from datetime import datetime
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException, \
    ElementNotInteractableException
import undetected_chromedriver as uc

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class SteamCommentBot:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.temp_dir = tempfile.mkdtemp(prefix="chrome_")

    def human_delay(self, min_seconds=1, max_seconds=3):
        """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        delay = random.uniform(min_seconds, max_seconds)
        time.sleep(delay)

    def has_non_bmp(self, s: str) -> bool:
        return any(ord(ch) > 0xFFFF for ch in s)

    def js_fill_textarea(self, element, text: str):
        # –Ω–∞–¥—ë–∂–Ω–æ –º–µ–Ω—è–µ—Ç value + —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç —Å–æ–±—ã—Ç–∏—è
        self.driver.execute_script("""
            const el = arguments[0], val = arguments[1];
            const desc = Object.getOwnPropertyDescriptor(HTMLTextAreaElement.prototype, 'value');
            desc.set.call(el, val);
            el.dispatchEvent(new Event('input', {bubbles:true}));
            el.dispatchEvent(new Event('change', {bubbles:true}));
        """, element, text)

    def scroll_into_view(self, el):
        self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", el)

    def safe_click(self, el):
        # –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω ¬´—Ñ–∏–∑–∏—á–µ—Å–∫–∏¬ª ‚Äî –∫–ª–∏–∫–∞–µ–º JS
        try:
            if not el.is_displayed() or el.size.get('width', 0) == 0 or el.size.get(
                    'height', 0) == 0:
                self.driver.execute_script("arguments[0].click();", el)
            else:
                el.click()
        except Exception:
            self.driver.execute_script("arguments[0].click();", el)


    def human_type(self, element, text):
        """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –ø–∞—É–∑–∞–º–∏ –∏ –æ—à–∏–±–∫–∞–º–∏"""
        for char in text:
            element.send_keys(char)
            time.sleep(random.uniform(0.05, 0.2))
            if random.random() < 0.03:
                element.send_keys(Keys.BACK_SPACE)
                time.sleep(random.uniform(0.1, 0.3))
                element.send_keys(char)

    def human_scroll(self, scroll_min=200, scroll_max=800):
        """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        scroll_amount = random.randint(scroll_min, scroll_max)
        self.driver.execute_script(f"window.scrollBy(0, {scroll_amount});")
        self.human_delay(0.5, 1.5)

    def move_mouse_humanly(self, element):
        """–î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –∫–∞–∫ —É —á–µ–ª–æ–≤–µ–∫–∞"""
        actions = ActionChains(self.driver)
        actions.move_to_element(element)
        actions.perform()
        self.human_delay(0.2, 0.5)

    def get_stealth_driver(self):
        # –í–ê–ñ–ù–û: –±–µ—Ä—ë–º –æ–ø—Ü–∏–∏ –∏–∑ uc
        chrome_options = uc.ChromeOptions()

        # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä/Alpine
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")

        # –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Ç–æ–≥–æ —Ñ–ª–∞–≥–∞
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")

        # –ö–≠–®/–ø—Ä–æ—Ñ–∏–ª—å ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º user_data_dir
        chrome_options.add_argument(f"--user-data-dir={self.temp_dir}")
        chrome_options.add_argument("--disable-application-cache")
        chrome_options.add_argument("--disk-cache-size=0")

        # user-agent
        chrome_options.add_argument(
            "--user-agent="
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
            "(KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
        )

        CHROME_BIN = os.getenv("CHROME_BIN", "/usr/bin/chromium-browser")
        CHROMEDRIVER = os.getenv("UC_DRIVER_EXECUTABLE_PATH", "/usr/bin/chromedriver")

        # –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º version_main; –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º excludeSwitches/useAutomationExtension
        driver = uc.Chrome(
            options=chrome_options,
            headless=True,
            browser_executable_path=CHROME_BIN,  # –≤–º–µ—Å—Ç–æ options.binary_location
            driver_executable_path=CHROMEDRIVER if os.path.exists(
                CHROMEDRIVER) else None,
        )

        # –î–æ–ø. —à–ª–∏—Ñ ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å uc, –Ω–æ –Ω–µ –º–µ—à–∞–µ—Ç
        driver.execute_script(
            "Object.defineProperty(navigator,'webdriver',{get:()=>undefined})")
        return driver

    def login_with_cookies(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫—É–∫–∏"""
        try:
            print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫—É–∫–∏...")

            # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ–º–µ–Ω steamcommunity.com
            self.driver.get("https://steamcommunity.com")
            self.human_delay(2, 4)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫—É–∫–∏
            cookies_to_add = [
                {
                    'name': 'steamLoginSecure',
                    'value': os.getenv('STEAM_LOGIN_SECURE'),
                    'domain': '.steamcommunity.com',
                    'path': '/',
                    'secure': True
                },
                {
                    'name': 'steamRememberLogin',
                    'value': os.getenv('STEAM_REMEMBER_LOGIN', ''),
                    'domain': '.steamcommunity.com',
                    'path': '/',
                    'secure': True
                }
            ]

            for cookie in cookies_to_add:
                if cookie['value']:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å—Ç—å
                    try:
                        self.driver.add_cookie(cookie)
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫—É–∫–∞: {cookie['name']}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—É–∫—É {cookie['name']}: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫—É–∫
            self.driver.refresh()
            self.human_delay(3, 5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            self.driver.get("https://steamcommunity.com/my/profile")
            self.human_delay(2, 4)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
            try:
                profile_name = self.wait.until(
                    EC.presence_of_element_located((By.CLASS_NAME, "persona_name"))
                )
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–∞–∫: {profile_name.text}")
                return True
            except:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫—É–∫–∏")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫—É–∫–∏: {e}")
            return False

    # --- –∑–∞–º–µ–Ω–∞ –º–µ—Ç–æ–¥–∞ ---
    def post_comment_to_group(self, group_url, comment_text):
        try:
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–∂—É –≤ –≥—Ä—É–ø–ø—É: {group_url}")
            self.driver.get(group_url)

            # –ò—â–µ–º ¬´–±—ã—Å—Ç—Ä—ã–π –ø–æ—Å—Ç¬ª –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
            comment_area = self.wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR,
                                                "textarea[id*='quickpost_text'], .commentthread_textarea"))
            )

            self.scroll_into_view(comment_area)
            self.move_mouse_humanly(comment_area)
            self.human_delay(0.4, 1.0)

            # –æ—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ JS (–∏–Ω–æ–≥–¥–∞ .clear() –Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç —Å–æ–±—ã—Ç–∏—è)
            self.driver.execute_script("arguments[0].value='';", comment_area)

            # –í–≤–æ–¥: –µ—Å–ª–∏ –µ—Å—Ç—å —ç–º–æ–¥–∑–∏ ‚Äî —á–µ—Ä–µ–∑ JS, –∏–Ω–∞—á–µ ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π¬ª –Ω–∞–±–æ—Ä
            if self.has_non_bmp(comment_text):
                self.js_fill_textarea(comment_area, comment_text)
            else:
                comment_area.click()
                self.human_type(comment_area, comment_text)

            # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏
            print(1)
            submit_btn = self.wait.until(
                EC.presence_of_element_located((
                    By.CSS_SELECTOR,
                    "button[id*='quickpost_submit'], .commentthread_submit button, .commentthread_submit input[type='submit']"
                ))
            )
            print(2)
            self.scroll_into_view(submit_btn)
            self.move_mouse_humanly(submit_btn)
            self.human_delay(0.3, 0.8)

            # –ö–ª–∏–∫ —Å —Ñ–æ–ª–ª–±—ç–∫–æ–º –Ω–∞ JS (–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç ¬´has no size and location¬ª)
            self.safe_click(submit_btn)
            print("3")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî textarea –æ—á–∏—Å—Ç–∏–ª–∞—Å—å –∏–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –∑–∞–ø–∏—Å—å
            try:
                WebDriverWait(self.driver, 10).until(
                    lambda d: (comment_area.get_attribute("value") or "").strip() == ""
                )
            except TimeoutException:
                pass

            print("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            self.human_delay(3, 6)
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            try:
                print("üì∏ –°–¥–µ–ª–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏")
            except:
                pass
            return False

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
            self.driver = self.get_stealth_driver()
            self.wait = WebDriverWait(self.driver, 15)

            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫—É–∫–∏
            if not self.login_with_cookies():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return

            # –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            groups_to_post = os.getenv('STEAM_GROUPS', '').split(',')
            comment_text = (
                 "Send me offer\n"
                 ":steamthis: Open to any deals"
                 "\nhttps://steamcommunity.com/tradeoffer/new/?partner=889283026&token=NhsSV1bu"
                 "\n[H]"
                 "\nButterfly knife | boreal forest FT"
                 "\nSport gloves | bronze morph BS"
                 "\nUSP-S | kill —Åonfirmed FT"
             )

            if not groups_to_post or not comment_text:
                print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ .env")
                return

            successful_posts = 0
            failed_posts = 0

            print(f"üìä –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ {len(groups_to_post)} –≥—Ä—É–ø–ø...")

            for i, group_url in enumerate(groups_to_post):
                group_url = group_url.strip()
                if not group_url:
                    continue

                print(
                    f"\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥—Ä—É–ø–ø—É {i + 1}/{len(groups_to_post)}: {group_url}")

                success = self.post_comment_to_group(group_url, comment_text)

                if success:
                    successful_posts += 1
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_posts}")
                else:
                    failed_posts += 1
                    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {failed_posts}")

                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ (2-5 –º–∏–Ω—É—Ç)
                if i < len(groups_to_post) - 1:
                    delay = random.randint(180, 300)
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–æ–π...")
                    time.sleep(delay)

            print(f"\nüéØ –ò—Ç–æ–≥: –£—Å–ø–µ—à–Ω–æ {successful_posts}, –ù–µ—É–¥–∞—á–Ω–æ {failed_posts}")

        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

        finally:
            if self.driver:
                print("üõë –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
                self.driver.quit()

            try:
                import shutil
                shutil.rmtree(self.temp_dir, ignore_errors=True)
                print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
            except:
                pass


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = ['STEAM_LOGIN_SECURE', 'STEAM_GROUPS']
    missing_vars = [var for var in required_vars if not os.getenv(var)]

    if missing_vars:
        pass
    else:
        bot = SteamCommentBot()
        bot.run()
